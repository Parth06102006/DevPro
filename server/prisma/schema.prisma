// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(cuid())
  name           String?
  email          String?           @unique
  password       String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  sessions       Session[]         @relation("UserSessions")
  createdProjects Project[]        @relation("UserProjects")
  savedProjects  SavedProject[]
}

model Session {
  id             String            @id @default(cuid())
  user           User?             @relation("UserSessions", fields: [userId], references: [id])
  userId         String?

  // Session token for authentication
  sessionToken   String?           @unique

  // Inputs are optional; can be filled later
  inputLanguage  String[]          @default([])
  inputTechStack String[]          @default([])

  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Each session can generate multiple projects
  generatedProjects GeneratedProject[]
}


model GeneratedProject {
  id             String             @id @default(cuid())
  session        Session            @relation(fields: [sessionId], references: [id])
  sessionId      String
  title          String
  description    String
  difficulty     DifficultyLevel    @default(BEGINNER)
  techStack      String[]
  programmingLanguage String[]
  createdAt      DateTime           @default(now())

  // When user selects a project, detailed steps are generated and linked here
  detailedProject Project?
}

model Project {
  id                String            @id @default(cuid())
  title             String
  description       String
  difficulty        DifficultyLevel    @default(BEGINNER)
  techStack         String[]
  programmingLanguage String[]
  implementationSteps Step[]
  createdBy         User?              @relation("UserProjects", fields: [createdById], references: [id])
  createdById       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Back-reference if this was generated in a session
  generatedFrom     GeneratedProject?  @relation(fields: [generatedFromId], references: [id])
  generatedFromId   String?         @unique

  savedByUsers      SavedProject[]
}

model Step {
  id          String       @id @default(cuid())
  stepNumber  Int
  title       String
  details     String
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   String
}

model SavedProject {
  id          String       @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   String
  savedAt     DateTime      @default(now())

  @@unique([userId, projectId]) // prevent duplicate saves
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
